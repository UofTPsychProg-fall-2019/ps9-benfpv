}
else if (curr_trait == 'N'){
mean_col[curr_row] = N_mean[sub_counter]
}
else if (curr_trait == 'O'){
mean_col[curr_row] = O_mean[sub_counter]
}
}
mean_col
ipip.comp$trait_mean = mean_col
not_missing = 1
print(ipip.comp)
unique(exer)
unique(ipip.comp$exer)
c(unique(ipip.comp$exer))
freq
frequency
length(unique(ipip.comp$exer))
length(ipip.comp$exer==unique(ipip.comp$exer)[1])
unique(ipip.comp$exer)[1]
ipip.comp$exer==unique(ipip.comp$exer)[1]
length(ipip.comp$exer==unique(ipip.comp$exer)[1])
dim(length(ipip.comp$exer==unique(ipip.comp$exer)[1]))
ipip.comp$exer==unique(ipip.comp$exer)[1]
find(ipip.comp$exer==unique(ipip.comp$exer)[1])
length(ipip.comp$exer==unique(ipip.comp$exer)[1])
ipip.comp$exer==unique(ipip.comp$exer)[1]
find(ipip.comp$exer==unique(ipip.comp$exer)[1])==true
ipip.comp$exer(unique(ipip.comp$exer)[1])
ipip.comp$exer(ipip.comp$exer==unique(ipip.comp$exer)[1])
ipip.comp$exer(ipip.comp$exer==unique(ipip.comp$exer)[1])
ipip.comp$exer==unique(ipip.comp$exer)[1]
ipip.comp$exer[ipip.comp$exer==unique(ipip.comp$exer)[1]]
len(ipip.comp$exer[ipip.comp$exer==unique(ipip.comp$exer)[1]])
length(ipip.comp$exer[ipip.comp$exer==unique(ipip.comp$exer)[1]])
seq(1,unique(ipip.comp$exer),1)
seq(1,unique(ipip.comp$exer),1)
seq(1,unique(ipip.comp$exer))
seq(1,length(unique(ipip.comp$exer)))
exer_lengths = seq(1,length(unique(ipip.comp$exer)))
for (ex in unique(ipip.comp$exer)) {
exer_lengths[ex] = length(ipip.comp$exer[ipip.comp$exer==unique(ipip.comp$exer)[ex]])
}
exer_lengths
length(ipip.comp$exer[ipip.comp$exer==unique(ipip.comp$exer)[ex]])
ex
exer_lengths = seq(1,length(unique(ipip.comp$exer)))
for (ex in length(unique(ipip.comp$exer))) {
exer_lengths[ex] = length(ipip.comp$exer[ipip.comp$exer==unique(ipip.comp$exer)[ex]])
}
exer_lengths
length(unique(ipip.comp$exer)))
exer_lengths
unique(ipip.comp$exer))
unique(ipip.comp$exer)
length(unique(ipip.comp$exer))
1:length(unique(ipip.comp$exer)))
seq(1,length(unique(ipip.comp$exer)))
exer_lengths = seq(1,length(unique(ipip.comp$exer)))
for (ex in seq(1,length(unique(ipip.comp$exer)))) {
exer_lengths[ex] = length(ipip.comp$exer[ipip.comp$exer==unique(ipip.comp$exer)[ex]])
}
exer_lengths
arrange(ipip.comp$exer)
arrange(exer_lenghts)
sort(exer_lengths)
sort(exer_lengths)
sort(exer_lengths,increasing)
sort(exer_lengths,decreasing=true)
sort(exer_lengths,decreasing=TRUE)
rank
rank(sort(exer_lengths,decreasing=TRUE))
rank(exer_lengths,decreasing=TRUE)
rank(exer_lengths)
unique(ipip.comp$exer[rank(exer_lengths)])
rank
unique(ipip.comp$exer[rank(exer_lengths)])
ipip.comp$exer[rank(exer_lengths)]
unique(ipip.comp$exer)
arrange(unique(ipip.comp$exer),rank(exer_lenghts))
arrange(unique(ipip.comp$exer)[rank(exer_lenghts)])
rank(exer_lengths)
unique(ipip.comp$exer)
ipip.comp$exer
exer_lengths
ipip.comp$exer
unique(ipip.comp$exer)
unique(ipip.comp$exer)==[1]
unique(ipip.comp$exer)[1]
unique(ipip.comp$exer)
unique(ipip.comp$exer)[prelev]
prelev=5
unique(ipip.comp$exer)[counter]
unique(ipip.comp$exer)[1]
unique(ipip.comp$exer)[unique(ipip.comp$exer)==counter]
unique(ipip.comp$exer)[unique(ipip.comp$exer)==counter]
unique(ipip.comp$exer)==counter
counter
counter = 1
unique(ipip.comp$exer)==counter
counter
unique(ipip.comp$exer)==counterrank(exer_lengths)==counter
rank(exer_lengths)==counter
unique(ipip.comp$exer)[rank(exer_lengths)==counter]
exer_lengths = seq(1,length(unique(ipip.comp$exer)))
for (ex in seq(1,length(unique(ipip.comp$exer)))) {
exer_lengths[ex] = length(ipip.comp$exer[ipip.comp$exer==unique(ipip.comp$exer)[ex]])
}
rank(exer_lengths)
counter = 0
for (prelev in rank(exer_lengths))
counter=counter+1
prelevels[counter] = unique(ipip.comp$exer)[rank(exer_lengths)==counter]
seq(1,length(rank(exer_lengths)))
exer_lengths = seq(1,length(unique(ipip.comp$exer)))
for (ex in seq(1,length(unique(ipip.comp$exer)))) {
exer_lengths[ex] = length(ipip.comp$exer[ipip.comp$exer==unique(ipip.comp$exer)[ex]])
}
rank(exer_lengths)
prelevels = seq(1,length(rank(exer_lengths)))
for (prelev in seq(1,length(rank(exer_lengths))))
prelevels[prelev] = unique(ipip.comp$exer)[rank(exer_lengths)==prelev]
prelevels
ipip.comp$exer <- factor(ipip.comp$exer,
levels=prelevels)
ipip.comp
exer_lengths
exer
prelevels
unique(ipip.comp$exer)
exer,avg
exer
exer.avg
sd
se
sd
summarize
ipip.cimp
exer.avg <- ipip.comp %>%
group_by(trait)
exer.avg
exer.avg <- ipip.comp %>%
group_by(trait) %>% summarize(exer)
summarize(exer)
summarize(ipip.comp$exer)
exer.avg <- ipip.comp %>%
group_by(trait) %>% summarize(exer(trait==A))
exer.avg <- ipip.comp %>%
group_by(trait) %>% summarize(mean=mean(mean_trait))
exer.avg <- ipip.comp %>%
group_by(trait) %>% summarize(mean=mean(trait_mean))
exer.avg
exer.avg <- ipip.comp %>%
group_by(exer) %>% summarize(mean=mean(trait_mean))
exer.avg
exer.avg <- ipip.comp %>%
group_by(exer) %>% summarize(mean=mean(trait))
exer.avg <- ipip.comp %>%
group_by(trait) %>% summarize(mean=mean(trait_mean))
exer.avg
exer.avg <- ipip.comp %>%
group_by(trait,exer) %>% summarize(mean=mean(trait_mean))
exer.avg
exer.avg <- ipip.comp %>%
group_by(exer,trait) %>% summarize(mean=mean(trait_mean))
exer.avg
View(exer.avg)
dodge <- position_dodge(0.5)
ggplot(exer.avg,aes(x=trait,y=avg,colour=exer))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and exercise')
ggsave('figures/exer.pdf',units='in',width=7,height=5)
std
sd
sd(trait_mean)
sd(ipip.comp$trait_mean)
sd(trait_mean)
sd=sd(trait_mean)
exer.avg <- ipip.comp %>%
group_by(exer,trait) %>% summarize(avg=mean(trait_mean), sd=sd(trait_mean))
exer.avg
sqrt(length(unique(ipip.comp$RIM)))
sqrt(length(unique(ipip.comp$RID)))
sqrt(length(unique(ipip.comp$RID)))exer.avg <- ipip.comp %>%
group_by(exer,trait) %>% summarize(avg=mean(trait_mean), sd=sd(trait_mean), sem=sd/sqrt(length(unique(ipip.comp$RID))))
exer
exer.avg <- ipip.comp %>%
group_by(exer,trait) %>% summarize(avg=mean(trait_mean), sd=sd(trait_mean), sem=sd/sqrt(length(unique(ipip.comp$RID))))
exer.avg
sd/sqrt(length(unique(ipip.comp$RID)))
sd/sqrt(length(unique(ipip.comp$RID))
)
unique(ipip.comp$RID)
length(unique(ipip.comp$RID))
sqrt(length(unique(ipip.comp$RID)))
sem
dodge <- position_dodge(0.5)
ggplot(exer.avg,aes(x=trait,y=avg,colour=exer))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and exercise')
ggsave('figures/exer.pdf',units='in',width=7,height=5)
exer.avg <- ipip.comp %>%
group_by(exer,trait) %>% summarize(avg=mean(trait_mean), sd=sd(score), sem=sd/sqrt(length(unique(ipip.comp$RID))))
exer.avg
dodge <- position_dodge(0.5)
ggplot(exer.avg,aes(x=trait,y=avg,colour=exer))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and exercise')
ggsave('figures/exer.pdf',units='in',width=7,height=5)
sd(score)
sd
exer.avg <- ipip.comp %>%
group_by(exer,trait) %>% summarize(avg=mean(trait_mean), sd=sd(score), sem=sd/(sqrt(length(unique(ipip.comp$RID))))
)
exer.avg
exer.avg <- ipip.comp %>%
group_by(exer,trait) %>% summarize(avg=mean(trait_mean), sd=sd(trait_mean), sem=sd/(sqrt(length(unique(ipip.comp$RID)))))
exer.avg
gender.avg <- ipip.comp %>%
group_by(gender,trait) %>% summarize(avg=mean(trait_mean), sd=sd(trait_mean), sem=sd/(sqrt(length(unique(ipip.comp$RID)))))
gender.avg
ggplot(gender.avg,aes(x=trait,y=avg,colour=gender))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and gender')
ggsave('figures/gender.pdf',units='in',width=5,height=5)
5 <= 25
ipip.comp$BMI_cat <- ipip.comp$BMI %>%
case_when(
. <18.5 ~ "underweight",
. >18.5 & . <= 25 ~ "healthy",
. >25 & . <= 30 ~ "overweight",
. >30 ~ "obese"
TRUE ~ as.character(.)
)
case_when(
. <18.5 ~ "underweight",
. >18.5 & . <= 25 ~ "healthy",
. >25 & . <= 30 ~ "overweight",
. >30 ~ "obese"
TRUE ~ as.character(.)
)
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp$BMI_cat <- ipip.comp$BMI %>%
case_when(
. <18.5 ~ "underweight",
. >18.5 & . <= 25 ~ "healthy",
. >25 & . <= 30 ~ "overweight",
. >30 ~ "obese"
TRUE ~ as.character(.)
)
ipip.comp$BMI_cat <- ipip.comp$BMI %>%
case_when(
. <18.5 ~ "underweight",
. >18.5 & . <= 25 ~ "healthy",
. >25 & . <= 30 ~ "overweight",
. >30 ~ "obese"
TRUE ~ as.character(.)
)
.
ipip.comp$BMI %>%
case_when(
. <18.5 ~ "underweight",
. >18.5 & . <= 25 ~ "healthy",
. >25 & . <= 30 ~ "overweight",
. >30 ~ "obese"
TRUE ~ as.character(.)
)
ipip.comp$BMI %>%
case_when(
. <18.5 ~ "underweight",
. >18.5 & . <= 25 ~ "healthy",
. >25 & . <= 30 ~ "overweight",
. >30 ~ "obese"
#TRUE ~ as.character(.)
)
ipip.comp$BMI %>%
case_when(
. <18.5 ~ "underweight",
. >18.5 & . <= 25 ~ "healthy",
. >25 & . <= 30 ~ "overweight",
. >30 ~ "obese"
#TRUE ~ as.character(.)
)
ipip.comp$BMI %>%
case_when(
. <18.5 ~ "underweight",
. >18.5 & . <= 25 ~ "healthy",
. >25 & . <= 30 ~ "overweight",
. >30 ~ "obese",
TRUE ~ as.character(.)
)
ipip.comp$BMI
ipip.comp$BMI_cat <- ipip.comp$BMI %>%
case_when(
. <18.5 ~ "underweight",
. >18.5 & . <= 25 ~ "healthy",
. >25 & . <= 30 ~ "overweight",
. >30 ~ "obese",
TRUE ~ as.character(.)
)
case_when(
ipip.comp$BMI <18.5 ~ "underweight",
ipip.comp$BMI >18.5 & . <= 25 ~ "healthy",
ipip.comp$BMI >25 & . <= 30 ~ "overweight",
ipip.comp$BMI >30 ~ "obese",
TRUE ~ as.character(ipip.comp$BMI)
)
case_when(
ipip.comp$BMI <18.5 ~ "underweight",
ipip.comp$BMI >18.5 & ipip.comp$BMI <= 25 ~ "healthy",
ipip.comp$BMI >25 & ipip.comp$BMI <= 30 ~ "overweight",
ipip.comp$BMI >30 ~ "obese",
TRUE ~ as.character(ipip.comp$BMI)
)
ipip.comp$BMI_cat <-
case_when(
ipip.comp$BMI <18.5 ~ "underweight",
ipip.comp$BMI >18.5 & ipip.comp$BMI <= 25 ~ "healthy",
ipip.comp$BMI >25 & ipip.comp$BMI <= 30 ~ "overweight",
ipip.comp$BMI >30 ~ "obese",
TRUE ~ as.character(ipip.comp$BMI)
)
ipip.comp$BMI_cat <- factor(ipip.comp$exer,
levels=c('underweight','healthy','overweight','obese'))
levels=c('underweight','healthy','overweight','obese')
levels
# Summarise the trait values across the different levels of exercise habits.
# Calculate both the mean (use the new variable name 'avg') and standard error
# of the mean (i.e., standard deviation divided by the square root of the
# number of participants; use variable name 'sem'):
exer.avg <- ipip.comp %>%
group_by(exer,trait) %>% summarize(avg=mean(trait_mean), sd=sd(trait_mean), sem=sd/(sqrt(length(unique(ipip.comp$RID)))))
# If you properly created the exer.avg tibble above, the following code will
# create a plot and save it as figures/exer.pdf. Check your figure with
# figures/exer_answer.pdf to see if your data wrangling is correct!
dodge <- position_dodge(0.5)
ggplot(exer.avg,aes(x=trait,y=avg,colour=exer))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and exercise')
ggsave('figures/exer.pdf',units='in',width=7,height=5)
# repeat the above summary commands for gender:
gender.avg <- ipip.comp %>%
group_by(gender,trait) %>% summarize(avg=mean(trait_mean), sd=sd(trait_mean), sem=sd/(sqrt(length(unique(ipip.comp$RID)))))
# create a gender plot and compare to the answer figure:
ggplot(gender.avg,aes(x=trait,y=avg,colour=gender))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and gender')
ggsave('figures/gender.pdf',units='in',width=5,height=5)
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp$BMI_cat <-
case_when(
ipip.comp$BMI <18.5 ~ "underweight",
ipip.comp$BMI >18.5 & ipip.comp$BMI <= 25 ~ "healthy",
ipip.comp$BMI >25 & ipip.comp$BMI <= 30 ~ "overweight",
ipip.comp$BMI >30 ~ "obese",
TRUE ~ as.character(ipip.comp$BMI)
)
# turn BMI_cat into a factor and order it with levels
ipip.comp$BMI_cat <- factor(ipip.comp$BMI_cat,
levels=c('underweight','healthy','overweight','obese'))
bmi.avg <- ipip.comp %>%
group_by(BMI,trait) %>% summarize(avg=mean(trait_mean), sd=sd(trait_mean), sem=sd/(sqrt(length(unique(ipip.comp$RID)))))
# create BMI plot and compare to the answer figure:
ggplot(bmi.avg,aes(x=trait,y=avg,colour=BMI_cat))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and BMI')
# summarise trait values by BMI categories
bmi.avg <- ipip.comp %>%
group_by(BMI_cat,trait) %>% summarize(avg=mean(trait_mean), sd=sd(trait_mean), sem=sd/(sqrt(length(unique(ipip.comp$RID)))))
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp$BMI_cat <-
case_when(
ipip.comp$BMI <18.5 ~ "underweight",
ipip.comp$BMI >18.5 & ipip.comp$BMI <= 25 ~ "healthy",
ipip.comp$BMI >25 & ipip.comp$BMI <= 30 ~ "overweight",
ipip.comp$BMI >30 ~ "obese",
TRUE ~ as.character(ipip.comp$BMI)
)
# turn BMI_cat into a factor and order it with levels
ipip.comp$BMI_cat <- factor(ipip.comp$BMI_cat,
levels=c('underweight','healthy','overweight','obese'))
# summarise trait values by BMI categories
bmi.avg <- ipip.comp %>%
group_by(BMI_cat,trait) %>% summarize(avg=mean(trait_mean), sd=sd(trait_mean), sem=sd/(sqrt(length(unique(ipip.comp$RID)))))
# create BMI plot and compare to the answer figure:
ggplot(bmi.avg,aes(x=trait,y=avg,colour=BMI_cat))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and BMI')
forcats::fct_explicit_na
# create BMI plot and compare to the answer figure:
ggplot(bmi.avg,aes(x=trait,y=avg,colour=BMI_cat))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and BMI')
unique(ipip.comp$BMI)
unique(ipip.comp$BMI_cat)
# For BMI, we need to recode the BMI continuous values into a categorical
# variable. Add a new BMI_cat variable to ipip.comp based on common definitions
# of BMI categories:
# <18.5=underweight, 18.5-25=healthy, 25-30=overweight, >30=obese
# HINT: check out the case_when function:
#     https://dplyr.tidyverse.org/reference/case_when.html
ipip.comp$BMI_cat <-
case_when(
ipip.comp$BMI <18.5 ~ "underweight",
ipip.comp$BMI >=18.5 & ipip.comp$BMI <= 25 ~ "healthy",
ipip.comp$BMI >25 & ipip.comp$BMI <= 30 ~ "overweight",
ipip.comp$BMI >30 ~ "obese",
TRUE ~ as.character(ipip.comp$BMI)
)
# turn BMI_cat into a factor and order it with levels
ipip.comp$BMI_cat <- factor(ipip.comp$BMI_cat,
levels=c('underweight','healthy','overweight','obese'))
# summarise trait values by BMI categories
bmi.avg <- ipip.comp %>%
group_by(BMI_cat,trait) %>% summarize(avg=mean(trait_mean), sd=sd(trait_mean), sem=sd/(sqrt(length(unique(ipip.comp$RID)))))
# create BMI plot and compare to the answer figure:
ggplot(bmi.avg,aes(x=trait,y=avg,colour=BMI_cat))+
geom_pointrange(aes(ymin=avg-sem,ymax=avg+sem),
position=dodge)+
labs(x='big 5 trait',y='mean trait value',title='Big 5 and BMI')
?cor
corrcoef
?corrcoef
??corrcoef
?cor
age.avg <- ipip.comp %>%
group_by(age,trait) %>% summarize(avg=mean(trait_mean), sd=sd(trait_mean), sem=sd/(sqrt(length(unique(ipip.comp$RID)))))
age.avg
age.avg
corrcoef = cor(avg.age$age, avg.age$trait)
corrcoef = cor(avg.age$age, avg.age$avg)
age.avg <- ipip.comp %>%
group_by(age,trait) %>% summarize(avg=mean(trait_mean), sd=sd(trait_mean), sem=sd/(sqrt(length(unique(ipip.comp$RID)))), corrcoef=cor(age,trait_mean))
age.avg
cor(age,trait_mean)
age.avg <- ipip.comp %>%
group_by(age,trait) %>% summarize(avg=mean(trait_mean), sd=sd(trait_mean), sem=sd/(sqrt(length(unique(ipip.comp$RID)))), corrcoef=cor(age,avg))
# finally, use dplyr to calculate the correlation (use variable name 'corrcoef')
# between age and the big 5
# NOTE: check out the cor() function by running ?cor in the console
age.avg <- ipip.comp %>%
group_by(age,trait) %>% summarize(avg=mean(trait_mean), sd=sd(trait_mean), sem=sd/(sqrt(length(unique(ipip.comp$RID)))), corrcoef=cov(age,trait_mean))
# create age plot and compare to the answer figure
ggplot(age.avg,aes(x=trait,y=corrcoef))+
geom_hline(yintercept=0)+
geom_point(size=3)+
labs(x='big 5 trait',y='correlation between trait and age',title='Big 5 and age')
?cor
# finally, use dplyr to calculate the correlation (use variable name 'corrcoef')
# between age and the big 5
# NOTE: check out the cor() function by running ?cor in the console
age.avg <- ipip.comp %>%
group_by(age,trait) %>% summarize(avg=mean(trait_mean), sd=sd(trait_mean), sem=sd/(sqrt(length(unique(ipip.comp$RID)))), corrcoef=var(age,trait_mean))
# create age plot and compare to the answer figure
ggplot(age.avg,aes(x=trait,y=corrcoef))+
geom_hline(yintercept=0)+
geom_point(size=3)+
labs(x='big 5 trait',y='correlation between trait and age',title='Big 5 and age')
?cor
# finally, use dplyr to calculate the correlation (use variable name 'corrcoef')
# between age and the big 5
# NOTE: check out the cor() function by running ?cor in the console
age.avg <- ipip.comp %>%
group_by(age,trait) %>% summarize(avg=mean(trait_mean), sd=sd(trait_mean), sem=sd/(sqrt(length(unique(ipip.comp$RID)))), corrcoef=cor(age,trait_mean))
# finally, use dplyr to calculate the correlation (use variable name 'corrcoef')
# between age and the big 5
# NOTE: check out the cor() function by running ?cor in the console
age.avg <- ipip.comp %>%
group_by(age,trait) %>% summarize(corrcoef=cor(age,trait_mean))
warnings()
# finally, use dplyr to calculate the correlation (use variable name 'corrcoef')
# between age and the big 5
# NOTE: check out the cor() function by running ?cor in the console
age.avg <- ipip.comp %>%
group_by(age,trait) %>% summarize(corrcoef=cor(age,score))
warnings()
cor(ipip.comp$age,ipip.comp$trait_mean)
age.avg <- ipip.comp %>%
group_by(age,trait) %>% summarize(corrcoef=cor(ipip.comp$age,ipip.comp$trait_mean))
age.avg
summarize(corrcoef=cor(age,trait_mean))
ipip.comp %>%
group_by(age,trait) %>% summarize(corrcoef=cor(age,trait_mean))
age.avg <- ipip.comp %>%
group_by(age,trait,trait_mean) %>% summarize(corrcoef=cor(age,trait_mean))
age.avg
age.avg <- ipip.comp %>%
group_by(age,trait,trait_mean) %>% summarize(avg=mean(trait_mean), corrcoef=cor(age,trait_mean))
